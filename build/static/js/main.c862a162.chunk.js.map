{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initMatrix","App","useState","matrix","setMatrix","matrixSize","currentPlayer","setCurrentPlayer","selR","setSelR","selC","setSelC","winner","setWinner","useEffect","row","Array","fill","tempMatrix","i","push","vertical","horizontal","d1","d2","isWinner","className","map","val","c","r","onClick","nextPlayer","matrixCopy","squreClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAIMA,G,MAAa,IAwGJC,MAvGf,WAAgB,IAAD,EACeC,mBAASF,GADxB,mBACNG,EADM,KACEC,EADF,OAEQF,mBAAS,GAAvBG,EAFM,sBAG6BH,mBAAS,KAHtC,mBAGNI,EAHM,KAGSC,EAHT,OAIYL,mBAAS,MAJrB,mBAINM,EAJM,KAIAC,EAJA,OAKUP,mBAAS,MALnB,mBAKNQ,EALM,KAKDC,EALC,OAMcT,oBAAS,GANvB,mBAMPU,EANO,KAMCC,EAND,KAiFb,OAxEAC,qBAAU,WAKR,IAJA,IAAMC,EAAM,IAAIC,MAAMX,GAAYY,KAAK,MACjCC,EAAa,GAGVC,EAAG,EAAGA,EAAEd,EAAYc,IAC3BD,EAAWE,KAAX,YAAoBL,IAEtBX,EAAUc,KACV,CAACb,IAyDFS,qBAAU,WACJF,GAtCP,WACE,IAAIS,GAAW,EACXC,GAAa,EACbC,GAAK,EACLC,GAAK,EAET,GAAa,OAATd,GAA0B,OAATF,EAArB,CAIA,IAAK,IAAIW,EAAI,EAAGA,EAAId,EAAYc,IAE1BhB,EAAOgB,GAAGT,KAAUJ,IACtBe,GAAW,GAETlB,EAAOK,GAAMW,KAAOb,IACtBgB,GAAa,GAGXnB,EAAOgB,GAAGA,KAAOb,IACnBiB,GAAK,GAGHpB,EAAOgB,GAAGd,EAAac,EAAI,KAAOb,IACpCkB,GAAK,IAILH,GAAYC,GAAcC,GAAMC,IAClCX,GAAU,IAUTY,MAKH,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAClB,6BAEMvB,EAAOwB,KAAI,SAACC,EAAKC,GAAN,OACT,yBAAKH,UAAU,KACZE,EAAID,KAAI,SAACC,EAAKE,GAAN,OACP,yBAAKC,QAAS,YAlE9B,SAAoBD,EAAED,GACrB,IAAK1B,EAAO2B,GAAGD,KAAOjB,EAAO,CAC3BD,EAAQkB,GACRpB,EAAQqB,GACT,IAAIE,EAA6B,MAAlB1B,EAAwB,IAAK,IAC3CC,EAAiByB,GACjB,IAAMC,EAAW,YAAK9B,GACtB8B,EAAWH,GAAGD,GAAGG,EACjB5B,EAAU6B,IA0DsBC,CAAWJ,EAAED,IAAKH,UAAU,KAC5CvB,EAAO2B,GAAGD,YAOrB,4BAAKjB,EAAM,iBAAaN,EAAb,gBAA2C,OC1F5C6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c862a162.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {useState, useEffect} from 'react'\n\nconst initMatrix = [];\nfunction App() {\n  const [matrix, setMatrix] = useState(initMatrix);\n  const [matrixSize] = useState(3);\n  const [currentPlayer, setCurrentPlayer] = useState('o');\n  const [selR, setSelR ] = useState(null);\n  const [selC,setSelC] = useState(null)\n  const[winner, setWinner] = useState(false); \n\n\n  useEffect(()=>{\n    const row = new Array(matrixSize).fill(null);\n    const tempMatrix = [];\n    \n\n    for (let i =0; i<matrixSize; i++){\n      tempMatrix.push([...row])\n    }\n    setMatrix(tempMatrix);\n  },[matrixSize]);\n\n\n\n    \n  function squreClick(r,c){\n   if (!matrix[r][c] && !winner){\n     setSelC(c)\n     setSelR(r)\n    let nextPlayer=currentPlayer === \"x\" ? \"o\" :\"x\"\n     setCurrentPlayer(nextPlayer);\n     const matrixCopy= [...matrix];\n     matrixCopy[r][c]=nextPlayer;\n     setMatrix(matrixCopy);\n   }\n  }\n\n\n\n\n  function isWinner() {\n    let vertical = true;\n    let horizontal = true;\n    let d1 = true;\n    let d2 = true;\n\n    if (selC === null || selR === null) {\n      return;\n    }\n\n    for (let i = 0; i < matrixSize; i++) {\n     \n      if (matrix[i][selC] !== currentPlayer) {\n        vertical = false;\n      }\n      if (matrix[selR][i] !== currentPlayer) {\n        horizontal = false;\n      }\n\n      if (matrix[i][i] !== currentPlayer) {\n        d1 = false;\n      }\n\n      if (matrix[i][matrixSize - i - 1] !== currentPlayer) {\n        d2 = false;\n      }\n\n    }\n    if (vertical || horizontal || d1 || d2) {\n      setWinner(true);\n    }\n  }\n\n\n\n\n\n   useEffect(() => {\n     if(!winner){\n       isWinner();\n     }\n   }, )\n   \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div>\n          {\n            matrix.map((val, c)=>(\n              <div className='c'>\n                {val.map((val, r)=>(\n                  <div onClick={()=>{squreClick(r,c)}} className=\"r\">\n                    {matrix[r][c]}\n                  </div>\n                ))}\n              </div>\n            ))  \n          }\n          </div>\n          <h2>{winner ? `Player ${currentPlayer} is a winner` : \"\"}</h2>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}